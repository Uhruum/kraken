import TYPES from './types';
import Tag from "./tags";
import {Container} from 'inversify';
import { EarthquakeApiService } from './services/emsc/implementations/EarthquakeApiService';
import { IEarthquakeApiService } from './services/emsc/abstractions/IEarthquakeApiService';
import {IReverseGeocodingService} from "./services/reverseGeocoding/abstractions/IReverseGeocodingService";
import {ReverseGeocodingService} from "./services/reverseGeocoding/implementations/ReverseGeocodingService";
import {IScheduler} from "./services/schedulers/abstrations/IScheduler";
import {EarthquakeScheduler} from "./services/schedulers/implementations/EarthquakeScheduler";
import {TestScheduler} from "./services/schedulers/implementations/TestScheduler";
import {ISchedulerService} from "./services/schedulers/abstrations/ISchedulerService";
import {SchedulerService} from "./services/schedulers/implementations/SchedulerService";
import {ILogger} from "./services/logger/abstractions/ILogger";
import {Logger} from "./services/logger/implementations/Logger";
import {DatabaseService} from "./domain/DatabaseService";
import {IDatabaseService} from "./domain/IDatabaseService";
import {ILocationService} from "./services/location/abstractions/ILocationService";
import {LocationService} from "./services/location/implementations/LocationService";
import {IEarthquakeService} from "./services/earthquake/abstractions/IEarthquakeService";
import {EarthquakeService} from "./services/earthquake/implementations/EarthquakeService";

let container = new Container();
container.bind<ILogger>(TYPES.ILogger).to(Logger).inSingletonScope();
container.bind<IDatabaseService>(TYPES.IDatabaseService).to(DatabaseService).inSingletonScope();
container.bind<IEarthquakeApiService>(TYPES.IEarthquakeApiService ).to(EarthquakeApiService).inRequestScope();
container.bind<IReverseGeocodingService>(TYPES.IReverseGeocodingService ).to(ReverseGeocodingService).inRequestScope();
container.bind<IScheduler>(TYPES.IScheduler).to(EarthquakeScheduler).inSingletonScope().whenTargetNamed(Tag.EARTH_QUAKE_SCHEDULER);
container.bind<IScheduler>(TYPES.IScheduler).to(TestScheduler).inSingletonScope().whenTargetNamed(Tag.TEST_SCHEDULER);
container.bind<ISchedulerService>(TYPES.ISchedulerService ).to(SchedulerService);
container.bind<ILocationService>(TYPES.ILocationService ).to(LocationService).inRequestScope();
container.bind<IEarthquakeService>(TYPES.IEarthquakeService).to(EarthquakeService).inRequestScope();
export default container;